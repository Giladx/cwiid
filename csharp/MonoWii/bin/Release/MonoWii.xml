<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/jestin/Projects/MonoWii/bin/Release/MonoWii</name>
    </assembly>
    <members>
        <member name="T:MonoWii.cwiid.CWIID_FLAGS">
            <summary>
            Option flags can be enabled by cwiid_connect, or subsequently with cwiid_enable.
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_FLAGS.MESG_IFC">
            <summary>
            Enable the message based interfaces (message callback and cwiid_get_mesg)
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_FLAGS.CONTINUOUS">
            <summary>
            Enable continuous wiimote reports
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_FLAGS.REPEAT_BTN">
            <summary>
            Deliver a button message for each button value received, even if it hasn't changed.
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_FLAGS.NONBLOCK">
            <summary>
            Causes cwiid_get_mesg to fail instead of block if no messages are ready.
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_RPT_FLAGS">
            <summary>
            Report Mode Flags
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_LED_FLAGS">
            <summary>
            LED flags
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_BTN_FLAGS">
            <summary>
            Button flags
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_NUNCHUK_BTN_FLAGS">
            <summary>
            Nunchuk Button Flags
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_CLASSIC_BTN_FLAGS">
            <summary>
            Classic Controller Button Flags
            </summary>
        </member>
        <member name="T:MonoWii.cwiid.CWIID_RW_FLAGS">
            <summary>
            Data Read/Write flags
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.timespec.tv_sec">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.timespec.tv_nsec">
            <summary>
            Nanoseconds
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_MAX_READ_LEN">
            <summary>
            Maximum Data Read Length
            </summary>
        </member>
        <member name="F:MonoWii.cwiid.CWIID_ACC_MAX">
            * Array Index Defs */</member>
        <member name="M:MonoWii.cwiid.cwiid_open(MonoWii.Bluetooth.bdaddr_t@,MonoWii.cwiid.CWIID_FLAGS)">
            <summary>
            Establish a connection with a wiimote.
            Pass the address of a bdaddr set to *BDADDR_ANY to connect to any (one) available wiimote. In this case, the bdaddr will be filled with the address of the connected wiimote. Due to the bizarre way in which BlueZ implements BDADDR_ANY, it is recommended that BDADDR_ANY not be passed directly to wiimote_connect, as this may change the value of BDADDR_ANY.
            </summary>
            <param name="bdaddr">
            A <see cref="T:MonoWii.Bluetooth.bdaddr_t" /></param>
            <param name="flags">
            A <see cref="T:MonoWii.cwiid.CWIID_FLAGS" /></param>
            <returns>
            A <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:MonoWii.cwiid.cwiid_get_id(System.IntPtr)">
            <summary>
            Accessor function for the wiimote id, which is guaranteed to be unique among all wiimotes in a single process.Accessor function for the wiimote id, which is guaranteed to be unique among all wiimotes in a single process.
            </summary>
        </member>
        <member name="M:MonoWii.cwiid.cwiid_set_mesg_callback(System.IntPtr,MonoWii.cwiid.cwiid_mesg_callback_t)">
            <summary>
            Sets the message callback function, which is called when a set of messages are received from the wiimote (each message in a set was generated from the same packet and therefore arrived simultaneously). Note that option flag CWIID_FLAG_MESG_IFC must be enabled for the callback to be called. Passing NULL for the callback cancels the current callback, if there is one.
            </summary>
        </member>
        <member name="M:MonoWii.cwiid.cwiid_command(System.IntPtr,MonoWii.cwiid.cwiid_command_Flags,System.Int32)">
            <summary>
            Issue command to wiimote. Available commands and their associated flags are as follows:
            CWIID_CMD_STATUS
            Request a status message (delivered to the message callback) (flags ignored)
            CWIID_CMD_LED
            Set the LED state. The following flags may be bitwise ORed:
            * CWIID_LED1_ON
            * CWIID_LED2_ON
            * CWIID_LED3_ON
            * CWIID_LED4_ON
            CWIID_CMD_RUMBLE
            Set the Rumble state. Set flags to 0 for off, anything else for on.
            CWIID_CMD_RPT_MODE
            Set the reporting mode of the wiimote, which determines what wiimote peripherals are enabled, and what data is received by the host. The following flags may be bitwise ORed (Note that it may not be assumed that each flag is a single bit - specifically, CWIID_RPT_EXT = CWIID_RPT_NUNCHUK | CWIID_RPT_CLASSIC):
            * CWIID_RPT_STATUS
            * CWIID_RPT_BTN
            * CWIID_RPT_ACC
            * CWIID_RPT_IR
            * CWIID_RPT_NUNCHUK
            * CWIID_RPT_CLASSIC
            * CWIID_RPT_EXT
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.#ctor">
            <summary>
            The standard constructor for a Wiimote object
            </summary>
        </member>
        <member name="T:MonoWii.Wiimote.LEDS">
            <summary>
            This is the delegate that gets called when an infrared event occurs
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_nMinIRInterval">
            <summary>
            The minimum time lapse between calls to IREvent
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_nMinACCInterval">
            <summary>
            The minimum time lapse between calls to AccelEvent
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_nMinNunchukACCInterval">
            <summary>
            The minimum time lapse between calls to NunchukAccelEvent
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_nMinNunchukStickInterval">
            <summary>
            The minimum time lapse between calls to NunchukStickEvent
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_hWiimote">
            <summary>
            The handle to the wiimote
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_Address">
            <summary>
            The address of the wiimote
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LEDState">
            <summary>
            The state of the the LEDs
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_bConnected">
            <summary>
            Whether the wiimote is connected
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LastIRTimeStamp">
            <summary>
            The timestamp of the last infrared event sent out
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LastACCTimeStamp">
            <summary>
            The timestamp of the last accelerometer event sent out
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LastNunchukACCTimeStamp">
            <summary>
            The timestamp of the last nunchuk accelerometer event sent out
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LastNunchukStickTimeStamp">
            <summary>
            The timestamp of the last nunchuk stick event sent out
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.m_LastNunchukButtons">
            <summary>
            This is the last received nunchuk button
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.WiimoteError">
            <summary>
            The error callback
            </summary>
        </member>
        <member name="F:MonoWii.Wiimote.WiimoteCallback">
            <summary>
            The main event callback
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.ButtonEvent">
            <summary>
            An event that hits when a button is pressed
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.AccelEvent">
            <summary>
            An event that hits when an accelerometer event is recieved
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.IREvent">
            <summary>
            An event that hits when an infrared event is recieved
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.NunchukButtonEvent">
            <summary>
            An event that hits when a nunchuk button event is recieved
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.NunchukAccelEvent">
            <summary>
            An event that hits when a nunchuk accelerometer event is recieved
            </summary>
        </member>
        <member name="E:MonoWii.Wiimote.NunchukStickEvent">
            <summary>
            An event that hits when a nunchuk stick event is recieved
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.Connected">
            <summary>
            Whether the wiimote is connected
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.MinIRInterval">
            <summary>
            The minimum time lapse between calls to IREvent
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.MinACCInterval">
            <summary>
            The minimum time lapse between calls to AccelEvent
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.MinNunchukACCInterval">
            <summary>
            The minimum time lapse between calls to NunchukAccelEvent
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.MinNunchukStickInterval">
            <summary>
            The minimum time lapse between calls to NunchukStickEvent
            </summary>
        </member>
        <member name="P:MonoWii.Wiimote.Address">
            <summary>
            The address of the wiimote
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Connect">
            <summary>
            Connects whatever wiimote device has been previously specified (Any available is the default).
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Connect(MonoWii.Bluetooth.bdaddr_t)">
            <summary>
            Connects the wiimote with the specified address
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Disconnect">
            <summary>
            Disconnects the connect wiimote
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Enable(MonoWii.cwiid.CWIID_FLAGS)">
            <summary>
            Enables a flag
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Disable(MonoWii.cwiid.CWIID_FLAGS)">
            <summary>
            Disables a flag
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.Beep">
            <summary>
            Beeps
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.SetLEDState(MonoWii.cwiid.CWIID_LED_FLAGS)">
            <summary>
            Sets the states of the LEDs
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.SetReportMode(MonoWii.cwiid.CWIID_RPT_FLAGS)">
            <summary>
            Sets the reporting mode of the wiimote
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.ToggleLED(MonoWii.Wiimote.LEDS)">
            <summary>
            Toggles on/off the specified LED
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.SetLED(MonoWii.Wiimote.LEDS)">
            <summary>
            Turns on the specified LED
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.UnSetLED(MonoWii.Wiimote.LEDS)">
            <summary>
            Turns off the specified LED
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.SetRumble(System.Boolean)">
            <summary>
            Sets the state of the rumble
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.OnWiimoteCallback(System.IntPtr,System.Int32,System.IntPtr,MonoWii.cwiid.timespec@)">
            <summary>
            The main wiimote callback used by libcwiid
            </summary>
        </member>
        <member name="M:MonoWii.Wiimote.OnWiimoteError(System.IntPtr,System.String,System.IntPtr)">
            <summary>
            The error callback used by libcwiid
            </summary>
        </member>
        <member name="T:MonoWii.ButtonHandler">
            <summary>
            This is the delegate that gets called when a button event occurs
            </summary>
        </member>
        <member name="T:MonoWii.AccelHandler">
            <summary>
            This is the delegate that gets called when an accelerometer event occurs
            </summary>
        </member>
        <member name="T:MonoWii.IRHandler">
            <summary>
            This is the delegate that gets called when an infrared event occurs
            </summary>
        </member>
        <member name="T:MonoWii.NunchukButtonHandler">
            <summary>
            This is the delegate that gets called when nunchuk button event occurs
            </summary>
        </member>
        <member name="T:MonoWii.NunchukAccelHandler">
            <summary>
            This is the delegate that gets called when nunchuk accelerometer event occurs
            </summary>
        </member>
        <member name="T:MonoWii.NunchukStickHandler">
            <summary>
            This is the delegate that gets called when nunchuk stick event occurs
            </summary>
        </member>
    </members>
</doc>
